@model WebApp.Models.BookPicture
<script type="text/javascript">
  //全屏事件
  document.addEventListener('panel.onfullscreen', () => {
       $bookpicturedg.datagrid('resize');
   });
    //是否开启行内编辑
    var SUBEDITINLINE = true;
   //初始化 BookPicture datagrid
   var $bookpicturedg = $('#bookpicture_datagrid');
   //当前行记录
   var bookpicture = {};
   //datagrid CRUD method
    var bookpicture_editIndex = undefined;
    //取消编辑恢复状态
    function bookpicture_rejectChanges() {
		$bookpicturedg.datagrid('rejectChanges');
		bookpicture_editIndex = undefined;
    }
    //重新加载数据
    function bookpicture_reloadData() {
			$bookpicturedg.datagrid('unselectAll');
            $bookpicturedg.datagrid('uncheckAll');
	        $bookpicturedg.datagrid('reload');
	}
    //关闭编辑状态
	function bookpicture_endEditing() {
			if (bookpicture_editIndex === undefined) {
                return true; 
            }
			if ($bookpicturedg.datagrid('validateRow', bookpicture_editIndex)) {
				$bookpicturedg.datagrid('endEdit', bookpicture_editIndex);
				bookpicture_editIndex = undefined;
                return true;
			} else {
				const invalidinput = $('input.validatebox-invalid',$bookpicturedg.datagrid('getPanel'));
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
				return false;
			}
		}
    //单击列开启编辑功能
	function bookpicture_onClickCell(index, field) {
			const _operates = ['_operate1', 'ck'];
             $('button[name*=\'bookpicturedeleterowbutton\']').prop('disabled', false);
			if (!SUBEDITINLINE || $.inArray(field, _operates) >= 0) {
				return false;
			}
			if (bookpicture_editIndex !== index) {
				if (bookpicture_endEditing()) {
					$bookpicturedg.datagrid('selectRow', index)
							.datagrid('beginEdit', index);
                    //bookpicture_editIndex = index;
					var ed = $bookpicturedg.datagrid('getEditor', { index: index, field: field });
					if (ed) {
						($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
					}
				} else {
					$bookpicturedg.datagrid('selectRow', bookpicture_editIndex);
				}
			}
		}
    //双击弹出编辑当前行对话框
    function bookpicture_onDblClickRow(index, row) {
        if (!SUBEDITINLINE) {
            open_bookpicturedlg(index, row, 'Modified');
        }
    }
    //订阅对话框新增返回事件
    $(document).on('bookpicture_form.add', (e, index,item) => {
        $bookpicturedg.datagrid("insertRow",
            {
                index: 0,
                row: item
            });
        $("button[name*='bookpicture_cancelchangesbutton']").prop('disabled', false);
        $("button[name*='bookpicture_savechangesbutton']").prop('disabled', false);
    });
    //订阅对话框修改返回事件
    $(document).on('bookpicture_form.edit', (e,index, item) => {
        $bookpicturedg.datagrid('updateRow', {
            index: index,
            row: item
        });
        $("button[name*='bookpicture_cancelchangesbutton']").prop('disabled', false);
        $("button[name*='bookpicture_savechangesbutton']").prop('disabled', false);
    });
    //新增记录
    function bookpicture_appendItem() {
       const $bookform = $('#book_form');
       if ($bookform.form('enableValidation').form('validate')) {
          const book = $bookform.serializeJSON();
       const item = {
          
          BookId:book.Id
        };
      if (!SUBEDITINLINE) {
        open_bookpicturedlg(0, item, 'Added');
      } else {
			if (bookpicture_endEditing()) {
				//对必填字段进行默认值初始化
				$bookpicturedg.datagrid('insertRow', 
                               { index: 0,
                                  row: item 
                               });
				bookpicture_editIndex = 0;
				$bookpicturedg.datagrid('selectRow', bookpicture_editIndex)
						.datagrid('beginEdit', bookpicture_editIndex);
			}
        }
        }
	 }
    //删除编辑的行
	function bookpicture_removeItem() {
		if (bookpicture_editIndex !== undefined) {  
            const delindex = bookpicture_editIndex;
			$bookpicturedg.datagrid('cancelEdit', delindex)
					           .datagrid('deleteRow', delindex);
            $("button[name*='bookpicture_cancelchangesbutton']").prop('disabled', false);
            $("button[name*='bookpicture_savechangesbutton']").prop('disabled', false);
        } else {
           const rows = $bookpicturedg.datagrid('getChecked');
           rows.slice().reverse().forEach(row => {
                const rowindex = $bookpicturedg.datagrid('getRowIndex', row);
                $bookpicturedg.datagrid('deleteRow', rowindex);
                $("button[name*='bookpicture_cancelchangesbutton']").prop('disabled', false);
                $("button[name*='bookpicture_savechangesbutton']").prop('disabled', false);
            });
        }
	}
    //删除选中的行
    function bookpicture_deleteChecked() {
            const rows = $bookpicturedg.datagrid('getChecked');
            if (rows.length > 0) {
                var id = rows.filter(item=>item.Id!=null).map(item => {
                    return item.Id;
                });
                $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length}</span> 行记录?`,result => {
                    if (result) {
                        $.post('/BookPictures/DeleteChecked', { id: id })
                         .done(response => {
                            if (response.success) {
                                $bookpicturedg.datagrid('reload');
                            } else {
                                $.messager.alert('错误', response.err,'error');
                            }
                         });
                    }
                });  
            } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
            }
      }
  //获取修改的行
  function bookpicture_getChanges() {
    if (bookpicture_endEditing()) {
      if ($bookpicturedg.datagrid('getChanges').length > 0) {
        const inserted = $bookpicturedg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const deleted = $bookpicturedg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3;
          return item;
        });
        const updated = $bookpicturedg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2;
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
          return !deleted.includes(item);
        })).concat(deleted);
        return { success: true, changed };
      } else {
        return { success: true, changed:undefined};
      }
    } else {
      return { success: false,changed:undefined };
    }
  }
  //提交修改的数据
  //function bookpicture_acceptChanges() {
  //  $bookpicturedg.datagrid('acceptChanges');
  //}
  //提交保存后台数据库
  async function bookpicture_acceptChanges() {
			if (bookpicture_endEditing()) {
				if ($bookpicturedg.datagrid('getChanges').length > 0) {
					const inserted = $bookpicturedg.datagrid('getChanges', 'inserted').map(item => {
                       item.TrackingState = 1;
                       return item;
                    });
					const deleted = $bookpicturedg.datagrid('getChanges', 'deleted').map(item => {
                       item.TrackingState = 3;
                       return item;
                    });
					const updated = $bookpicturedg.datagrid('getChanges', 'updated').map(item => {
                       item.TrackingState = 2;
                       return item;
                    });
					//过滤已删除的重复项
                    const changed = inserted.concat(updated.filter(item => {
                           return !deleted.includes(item);
                         })).concat(deleted);
                   //console.table(changed);
				  if (MODELSTATE === 'Added') {
                    return { success:true, changed };
                  } else {
                    const response = await $.post('/BookPictures/AcceptChanges', {bookpictures:changed});
                    response.changed = undefined;
    				if (response.success) {
							toastr.success('保存明细成功'); 
							$bookpicturedg.datagrid('acceptChanges');
							bookpicture_reloadData()
                            return { success:true}; 
				    } else {
                           $.messager.alert('错误', response.err ,'error');
                           return { success:false, err:response.err };
                    }
                   }
				} else {
                  return { success: true, changed: undefined};
                }
			} else {
               return { success: false };
            }
      }


  $(() => {
    $bookpicturedg.datagrid({
      fit: false,
      height: 300,
      rownumbers: true,
      striped: true,
      idField: 'Id',
      sortName: 'Id',
      sortOrder: 'asc',
      remoteFilter: true,
      singleSelect: true,
      checkOnSelect: false,
      selectOnCheck: false,
      method: 'post',
      pageList: [10, 20, 50, 100, 1000],
      pagination: true,
      clientPaging: false,
      pagination: true,
      onBeforeLoad: function () {

      },
      onLoadSuccess: function (data) {
        bookpicture_editIndex = undefined;
        $("button[name*='bookpicture_deleterowbutton']").prop('disabled', true);
        $("button[name*='bookpicture_cancelchangesbutton']").prop('disabled', true);
        $("button[name*='bookpicture_savechangesbutton']").prop('disabled', true);
      },
      onCheck: function () {
        $("button[name*='bookpicture_deleterowbutton']").prop('disabled', false);
      },
      onUncheck: function () {
        const checked = $(this).datagrid('getChecked').length > 0;
        $("button[name*='bookpicture_deleterowbutton']").prop('disabled', !checked);
      },
      onCheckAll: function (rows) {
        if (rows.length > 0) {
          $("button[name*='bookpicture_deleterowbutton']").prop('disabled', false);
        }
      },
      onUncheckAll: function () {
        $("button[name*='bookpicture_deleterowbutton']").prop('disabled', true);
      },
      onSelect: function (index, row) {
        bookpicture = row;
      },
      onBeforeEdit: function (index, row) {
        bookpicture_editIndex = index;
        row.editing = true;
        $("button[name*='bookpicture_deleterowbutton']").prop('disabled', false);
        $("button[name*='bookpicture_cancelchangesbutton']").prop('disabled', false);
        $("button[name*='bookpicture_savechangesbutton']").prop('disabled', false);
        $(this).datagrid('refreshRow', index);
      },
      onBeginEdit: function (index, row) {
        //const editors = $(this).datagrid('getEditors', index);

      },
      onEndEdit: function (index, row) {

      },
      onAfterEdit: function (index, row) {
        row.editing = false;
        bookpicture_editIndex = undefined;
        $(this).datagrid('refreshRow', index);
      },
      onCancelEdit: function (index, row) {
        bookpicture_editIndex = undefined;
        row.editing = false;
        $("button[name*='bookpicture_deleterowbutton']").prop('disabled', true);
        $("button[name*='bookpicture_cancelchangesbutton']").prop('disabled', true);
        $("button[name*='bookpicture_savechangesbutton']").prop('disabled', true);
        $(this).datagrid('refreshRow', index);
      },
      columns: [[
        { field: 'ck', checkbox: true },

        {    /*Picture*/
          field: 'Picture',
          title: '  @Html.DisplayNameFor(model => model.Picture)',
          width: 200,
          editor: {
            type: 'textbox',
            options: {
              id: 'editor_Picture',
              prompt: '@Html.DescriptionFor(model => model.Picture)',
              required: false,
              validType: 'length[0,128]'
            }
          },
          sortable: true,
          hidden: false,
          resizable: true
        },
        {    /*Url*/
          field: 'Url',
          title: '  @Html.DisplayNameFor(model => model.Url)',
          width: 200,
          editor: {
            type: 'textbox',
            options: {
              id: 'editor_Url',
              prompt: '@Html.DescriptionFor(model => model.Url)',
              required: false,
              validType: 'length[0,512]'
            }
          },
          sortable: true,
          hidden: false,
          resizable: true
        },
        {    /*Description*/
          field: 'Description',
          title: '  @Html.DisplayNameFor(model => model.Description)',
          width: 200,
          editor: {
            type: 'textbox',
            options: {
              id: 'editor_Description',
              prompt: '@Html.DescriptionFor(model => model.Description)',
              required: false,
              validType: 'length[0,512]'
            }
          },
          sortable: true,
          hidden: false,
          resizable: true
        },
      ]]
    })
      .datagrid('enableFilter', [
      ]);
  });
      
</script>


 